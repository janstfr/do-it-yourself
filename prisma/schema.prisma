// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "cockroachdb"
    url      = env("DATABASE_URL")
}

model Widget {
    id    String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name  String
    price Float
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @unique @default(cuid())
    name          String?
    password      String?
    email         String?   @unique
    test          String?
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    likes         String[]
    posts         Post[]    @relation("WrittenPosts")
    favoritePosts Post[]    @relation("FavoritePosts")
}

model Post {
    id            String     @id @unique @default(uuid())
    createdAt     DateTime   @default(now())
    updatedAt     DateTime   @updatedAt
    title         String
    content       String
    authorId      String
    author        User       @relation("WrittenPosts", fields: [authorId], references: [id])
    favoritedBy   User?      @relation("FavoritePosts", fields: [favoritedById], references: [id])
    favoritedById String?
    categories    Category[]
}

model Category {
    id    String @id @unique @default(uuid())
    name  String
    posts Post[]
}
